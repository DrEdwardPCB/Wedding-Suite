name: Deploy Next.js to AWS ECS


on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ekwedding-app-repo
  ECS_CLUSTER: ekwedding-ecs-cluster
  ECS_SERVICE: ekwedding-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
    # Add secret to task defintion
    - name: Add secrets to Task Definition
      run: |
          sed -i "s|<MONGO_URI>|$MONGO_URI|g" ecs-task-definition.json 
          sed -i "s|<COOKIE_SECRET_KEY>|$COOKIE_SECRET_KEY|g" ecs-task-definition.json 
          sed -i "s|<NEXT_PUBLIC_PW_ENCRYPTION_KEY>|$NEXT_PUBLIC_PW_ENCRYPTION_KEY|g" ecs-task-definition.json 
          sed -i "s|<NEXT_PUBLIC_PW_ENCRYPTION_IV>|$NEXT_PUBLIC_PW_ENCRYPTION_IV|g" ecs-task-definition.json 
          sed -i "s|<MGMT_USERNAME>|$MGMT_USERNAME|g" ecs-task-definition.json 
          sed -i "s|<MGMT_PASSWORD>|$MGMT_PASSWORD|g" ecs-task-definition.json 
          sed -i "s|<AWS_REGION>|$AWS_REGION|g" ecs-task-definition.json 
          sed -i "s|<AMPLIFY_BUCKET>|$AMPLIFY_BUCKET|g" ecs-task-definition.json 
          sed -i "s|<AWS_ACCESS_KEY_ID>|$AWS_ACCESS_KEY_ID|g" ecs-task-definition.json 
          sed -i "s|<AWS_SECRET_ACCESS_KEY>|$AWS_SECRET_ACCESS_KEY|g" ecs-task-definition.json 
      env:
        MONGO_URI: ${{secrets.MONGO_URI}}
        COOKIE_SECRET_KEY: ${{secrets.COOKIE_SECRET_KEY}}
        NEXT_PUBLIC_PW_ENCRYPTION_KEY: ${{secrets.NEXT_PUBLIC_PW_ENCRYPTION_KEY}}
        NEXT_PUBLIC_PW_ENCRYPTION_IV: ${{secrets.NEXT_PUBLIC_PW_ENCRYPTION_IV}}
        MGMT_USERNAME: ${{secrets.MGMT_USERNAME}}
        MGMT_PASSWORD: ${{secrets.MGMT_PASSWORD}}
        AWS_REGION: ${{secrets.AWS_REGION}}
        AMPLIFY_BUCKET: ${{secrets.AMPLIFY_BUCKET}}
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

    # Login to AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Login to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }} --build-arg MONGO_URI={secret.MONGO_URI} --build-arg COOKIE_SECRET_KEY={secret.COOKIE_SECRET_KEY} --build-arg NEXT_PUBLIC_PW_ENCRYPTION_KEY={secret.NEXT_PUBLIC_PW_ENCRYPTION_KEY} --build-arg NEXT_PUBLIC_PW_ENCRYPTION_IV={secret.NEXT_PUBLIC_PW_ENCRYPTION_IV} --build-arg MGMT_USERNAME={secret.MGMT_USERNAME} --build-arg MGMT_PASSWORD={secret.MGMT_PASSWORD} --build-arg AWS_REGION={secret.AWS_REGION} --build-arg AMPLIFY_BUCKET={secret.AMPLIFY_BUCKET} --build-arg AWS_ACCESS_KEY_ID={secret.AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY={secret.AWS_SECRET_ACCESS_KEY} --no-cache .
        docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    # Push Docker image to ECR
    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
